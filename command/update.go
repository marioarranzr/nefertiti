package command

import (
	"fmt"

	"github.com/equinox-io/equinox"
)

// assigned when creating a new application in the dashboard
const EQUINOX_APP_ID = "app_dp5B113DhPV"

// public portion of signing key generated by `equinox genkey`
var EQUINOX_PUB_KEY = []byte(`
-----BEGIN ECDSA PUBLIC KEY-----
MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEp4sq6GOdBO604S1uLSW5mvIjCpjQQcBZ
Y25BbPac6hq1yclLdNnV6eJiydnZ2qFU3QVO0Z514+3LNdJve8VWn9eS9EGIPUrb
YM4jx11SYnaAd9vrLfW1uQN2m2RuiUrw
-----END ECDSA PUBLIC KEY-----
`)

type (
	UpdateCommand struct {
		*CommandMeta
	}
)

func (c *UpdateCommand) Run(args []string) int {
	var err error

	const (
		YOU_ARE_UP_TO_DATE = "You are running the latest version. Thank you for staying up-to-date!"
	)

	var options equinox.Options
	if err = options.SetPublicKeyPEM(EQUINOX_PUB_KEY); err != nil {
		return c.ReturnError(err)
	}

	// check for update
	var resp equinox.Response
	if resp, err = equinox.Check(EQUINOX_APP_ID, options); err != nil {
		if err == equinox.NotAvailableErr {
			fmt.Println(YOU_ARE_UP_TO_DATE)
			return 0
		}
		return c.ReturnError(err)
	}

	// do not mistakenly update the developer build
	if resp.ReleaseVersion == c.AppVersion {
		fmt.Println(YOU_ARE_UP_TO_DATE)
		return 0
	}

	// fetch the update and apply it
	err = resp.Apply()
	if err != nil {
		return c.ReturnError(err)
	}

	fmt.Printf("Updated to new version: %s\n", resp.ReleaseVersion)

	return 0
}

func (c *UpdateCommand) Help() string {
	return "Usage: ./cryptotrader update"
}

func (c *UpdateCommand) Synopsis() string {
	return "Check for a new version."
}
